const { ethers } = require("hardhat");

async function main() {
  console.log("üîß  Setting OCR3 config using pre-generated values");

  // Get pre-generated OCR3 config from environment variables
  const registryAddress = process.env.REGISTRY_ADDRESS;
  const signers = process.env.SIGNERS.split(",");
  const transmitters = process.env.TRANSMITTERS.split(",");
  const f = parseInt(process.env.F_VALUE, 10);
  const offchainConfigVersion = parseInt(process.env.OFFCHAIN_CONFIG_VERSION, 10);
  const offchainConfig = "0x" + process.env.OFFCHAIN_CONFIG; // Add 0x prefix

  const [deployer] = await ethers.getSigners();
  const registry = await ethers.getContractAt("AutomationRegistry2_3", registryAddress);

  console.log("Using pre-generated OCR3 config:");
  console.log("- Signers:", signers);
  console.log("- Transmitters:", transmitters);
  console.log("- F Value:", f);
  console.log("- Offchain Config Version:", offchainConfigVersion);
  console.log("- Offchain Config Length:", offchainConfig.length);

  //------------------------------------------------------------------
  // Build proper onchain config (NOT empty!) + billing configs
  //------------------------------------------------------------------
  //not presetn in  2_3: const transcoderAddress = process.env.TRANSCODER_ADDRESS || ethers.constants.AddressZero;
  const registrarAddress = process.env.REGISTRAR_ADDRESS || ethers.constants.AddressZero;
  const chainModuleAddress = process.env.CHAIN_MODULE_ADDRESS || ethers.constants.AddressZero;
  const linkTokenAddress = process.env.LINK_TOKEN_ADDRESS || ethers.constants.AddressZero;
  const wrappedNativeAddress = process.env.WRAPPED_NATIVE_ADDRESS || ethers.constants.AddressZero;
  const linkUsdFeedAddress = process.env.LINK_USD_FEED_ADDRESS || ethers.constants.AddressZero;
  const nativeUsdFeedAddress = process.env.NATIVE_USD_FEED_ADDRESS || ethers.constants.AddressZero;

  // Build TypedOnchainConfig23 (based on Chainlink's Create23OnchainConfig)
  const onchainConfig = ethers.utils.defaultAbiCoder.encode(
    [
      "address", // registrar
      "address", // upkeepPrivilegeManager  
      "address", // chainModule
      "bool"     // reorgProtectionEnabled
    ],
    [
      registrarAddress,
      deployer.address, // upkeepPrivilegeManager (deployer as default)
      chainModuleAddress,
      true // reorgProtectionEnabled
    ]
  );

  // Build billing tokens and configs
  const billingTokens = [linkTokenAddress, wrappedNativeAddress];
  const billingConfigs = [
    {
      gasFeePPB: 100,
      flatFeeMilliCents: ethers.BigNumber.from(500),
      priceFeed: nativeUsdFeedAddress,
      decimals: 18,
      fallbackPrice: ethers.BigNumber.from(1000),
      minSpend: ethers.BigNumber.from(200)
    },
    {
      gasFeePPB: 100,
      flatFeeMilliCents: ethers.BigNumber.from(500), 
      priceFeed: linkUsdFeedAddress,
      decimals: 18,
      fallbackPrice: ethers.BigNumber.from(1000),
      minSpend: ethers.BigNumber.from(200)
    }
  ];

  //------------------------------------------------------------------
  // Use setConfigTypeSafe (NOT setConfig) for v2.3
  //------------------------------------------------------------------
  console.log("Setting OCR3 configuration on registry...");
  
  const tx = await registry.setConfigTypeSafe(
    signers,              // ‚Üê Pre-generated by Go utility
    transmitters,         // ‚Üê Pre-generated by Go utility  
    f,                    // ‚Üê Pre-calculated
    onchainConfig,        // ‚Üê Proper onchain config
    offchainConfigVersion, // ‚Üê From Go utility
    offchainConfig,       // ‚Üê Pre-generated by Go utility (proper OCR3 format)
    billingTokens,
    billingConfigs
  );
  
  console.log("setConfigTypeSafe tx:", tx.hash);
  await tx.wait();
  console.log("‚úÖ  OCR3 configuration set successfully");

  //------------------------------------------------------------------
  // Set Payees (1-to-1 transmitter‚Üípayee)
  //------------------------------------------------------------------
  console.log("Setting payees...");
  const payeesTx = await registry.setPayees(transmitters);
  await payeesTx.wait();
  console.log("setPayees tx:", payeesTx.hash);

  console.log("‚úÖ  OCR3 configuration and payees setup complete");
}

main().catch((e) => {
  console.error("‚ùå  Error during OCR3 configuration:");
  console.error(e);
  process.exit(1);
}); 